%% vim: ts=4 sw=4 et ft=erlang
[
    {simple_bridge, [

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %% STANDARD SETTINGS
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        {server_name, simple_bridge},
        %% You can call this whatever you want. Name it after your application
        %% is probably best

        {handler, simple_bridge_handler_sample},
        %% the name of the simple_bridge handler module, which is expected to
        %% export run/1, ws_init/1, ws_message/1, ws_info/1, and terminate/1
       
        %% {backend, yaws}, 
        %% cowboy | inets | mochiweb | webmachine | yaws
        %% It's not necessary to specify this in the confiugration unless you
        %% want to start simple_bridge with application:start(simple_bridge) or
        %% simple_bridge:start/0

        {address, "0.0.0.0"},       
        %% IP address to bind, either in tuple format or string

        {port, 8000},               
        %% Port to bind

        {document_root, "./priv/static"}, 
        %% The path on the local machine to handle static files

        {static_paths, ["js/"]},
        %% The list of paths to be automatically translated to static paths by
        %% simple_bridge

        %% {anchor, AnchorModule}
        %% If not provided or set to undefined, will use
        %% BACKEND_simple_bridge_anchor. This is the backend-specific module
        %% for handling the requests from your chosen backend.
       
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %% FILE UPLOAD SETTINGS
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        {max_post_size, 100},
        %% No multipart request greater than above will be accepted. Units are
        %% MB
        
        {max_file_size, 100},
        %% No single uploaded file will be accepted greater than  the above.
        %% Units are MB.

        {max_file_in_memory_size,  0},
        %% If a file is less than the above, then instead of writing the file
        %% to disk, it'll be retained in memory and can be retrieved by
        %% sb_uploaded_file:data/1. See the README for more info.

        {scratch_dir, "./scratch"}
        %% This is the location of the temp directory where uploaded files will
        %% be placed.

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %% BACKEND-CONFIG
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        {websocket_interval, 10000}
        % Websocket check if socket is there (milliseconds). Default is 10000 
        {websocket_timeout, 5000}
        %% Weboscket timeout (milliseconds) Default is 5000


        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %% BACKEND-SPECIFIC DISPATCH TABLES:
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        %% {webmachine_dispatch, DispatchTable},
        %% Webmachine dispatch table override (ignores static_paths above)

        %% {webmachine_dispatch_fun, {Module, Function}}
        %% A Module:Function() that when evaluated will return a dispatch table
        %% for Webmachine, again ignores the static_paths above

        %% {cowboy_dispatch, DispatchTable}
        %% Cowboy dispatch table override (ignores static_paths)

        %% {cowboy_dispatch_fun, {Module, Function}}
        %% A Module:Function() that when evaluated will return a dispatch table
        %% for Cowboy, again ignoring the static_paths above. You'll likely
        %% want to add a dispatch rule pointing at the standard simple_bridge
        %% anchor (unless you're using your own custom anchor): 
        %% 
        %%      {'_', cowboy_simple_bridge_anchor,[]}
    ]}
].

